public class Quotation {
    public Opportunity iOpp = new Opportunity();
    public Opportunity getiOpp(){ return iOpp;}
    public List<Opportunity_Line_Item__c> lstOppli = new List<Opportunity_Line_Item__c>();
    Set <ID> setoppliid = new Set <ID>();
    Set <String> setpcid = new Set <String>();
    public List<Opportunity_Line_Item__c> getlstOppli(){ return lstOppli; } 
    public List<Product2> lstpro = new List<Product2>();
    public List<Product2> getlstpro(){ return lstpro; }
    public List<Document_Annexure__c> anx = new List<Document_Annexure__c>();
    public List<Document_Annexure__c> getanx(){ return anx; } 
    public List<String> setCostCentre = new List<String>();
    public String strHSN { get; set; }
    public String strGST { get; set; }
    public set<String> setbillGST = new  set<String>();
    public set<String> setAnnexure = new set<String>();
    public String stran { get; set; }
    public String strprod { get; set; }
    //public set<String> setprdat = new set<String>();
    //public set<String> setau = new  set<String>();
    //public String stra { get; set; }
    //public set<String> setp = new  set<String>();
    //public String strp { get; set; }
    //public Opportunity_Line_Item__c opp{ get; set; }
    //public HSN_Master__c hsn{ get; set; }
    //public List<HSN_Master__c> lstHSNM = new List<HSN_Master__c>();
    //public List<HSN_Master__c> getHSN(){ return lstHSNM; }
    public Map<String, Opportunity_Line_Item__c> mapOppLineItems = new Map<String, Opportunity_Line_Item__c>();
    public Map<String, Product2> Prodmap = new Map<String, Product2>();
    public List<Opportunity_Product_Line_Items__c> lstOpppli = new List<Opportunity_Product_Line_Items__c>();
    public List<Opportunity_Product_Line_Items__c> getlstOpppli(){ return lstOpppli;}
    public Map<String,List<Opportunity_Product_Line_Items__c>> mapoop = new Map<String,List<Opportunity_Product_Line_Items__c>>();
    public Map<String,List<Opportunity_Product_Line_Items__c>> getmapoop() {return mapoop;}
    public Double Amount { get; set; }
    public Double sum = 0.00;
    public Long n{ get; set; }
    public string AmountInWords { get; set; }
    public Double igst { get; set; }
    public Double sgst { get; set; }
    public Double cgst { get; set; }
    public Double tax { get; set; }
    public Double total { get; set; }
    public Double igst_per { get; set; }
    public Double sgst_per { get; set; }
    public Double cgst_per { get; set; }
    public String strcom { get; set; }
    public string Amount_Total { get; set;}
    public String numInWords {get; set;}
    public String total_final { set; get;}
    Public String igst_final { set; get;}
    Public String sgst_final { set; get;}
    Public String cgst_final { set; get;}
    public String Amount_final { set; get;}
    public set<String> setbillcode = new  set<String>();
    
    Public Map<String, list<Opportunity_Line_Item__c>>maplstMLITostrDate = new Map<String, list<Opportunity_Line_Item__c>>();
    Public Map<String, list<Opportunity_Line_Item__c>>getmaplstMLITostrDate(){
        return maplstMLITostrDate;
    }
    Public list<string>lstUniqDate = new list<string>();
    Public list<string>getlstUniqDate(){
        return lstUniqDate;
    }
    
    Public Map<String, Integer>mapCountTostrDate = new Map<String, Integer>();
    Public Map<String, Integer>getmapCountTostrDate(){
        return mapCountTostrDate;
    }    
    
    //mandate ofa li for uniq dates
    Public Map<String, list<Opportunity_Line_Item__c>>maplstOPLITostrDate = new Map<String, list<Opportunity_Line_Item__c>>();
    Public Map<String, list<Opportunity_Line_Item__c>>getmaplstOPLITostrDate(){
        return maplstOPLITostrDate;
    }
    Public list<string>lstOFAUniqDate = new list<string>();
    Public list<string>getlstOFAUniqDate(){
        return lstOFAUniqDate;
    }
    
    Public Map<String, Integer>mapOFACountTostrDate = new Map<String, Integer>();
    Public Map<String, Integer>getmapOFACountTostrDate(){
        return mapOFACountTostrDate;
    } 
    
    public List<Opportunity_Line_Item__c> lstFundsofa = new List<Opportunity_Line_Item__c>();
    public List<Opportunity_Line_Item__c> getlstFundsofa(){ return lstFundsofa; }   
    
    public Quotation(){
        
        String strOppid = Apexpages.Currentpage().Getparameters().get('id');
        system.debug('***strOppid'+strOppid);
        iOpp = [SELECT id, Name, Amount, Account.Name, Billing_Contact_Person__c, Billing_Contact_Person__r.Name, 
                Primary_Marketing_Contact_PMC__c, Primary_Marketing_Contact_PMC__r.Title, Account.BillingStreet,
                Account.BillingCountry, Account.BillingState, Primary_Marketing_Contact_PMC__r.Name, OLI_Total_Net_Amount__c,
                Primary_Marketing_Contact_PMC__r.UserRole.Name, CGST_Amount__c, IGST_Amount__c, SGST_Amount__c, Total_Net_Amount_and_GST__c,
                Account.BillingCity, Account.BillingPostalCode, Billing_Contact_Person__r.LastName, AmountInWords__c, CGST__c, IGST__c, SGST__c,
                Product_Count__c, Billing_Contact_Person__r.Designation__c, Billing_Contact_Person__r.salutation,
                Billing_Contact_Person__r.Contact_Name_Readonly__c, Primary_Marketing_Contact_PMC__r.HRMS_Designation__c,
                CurrencyIsoCode, Account.PAN__c , CRISIL_Billing_Master__r.Billing_Location_GST__c, CRISIL_Billing_Master__r.Billing_Location_PAN__c,
                CRISIL_Billing_Master__r.GST_State_Code__c, CRISIL_Billing_Master__r.Name, Billing_Contact_Person__r.MailingState, Billing_Contact_Person__r.MailingCity,
                Billing_Contact_Person__r.MailingCountry, Billing_Contact_Person__r.MailingStreet , Billing_Contact_Person__r.MailingPostalCode
                From Opportunity WHERE id = :strOppid];
        
        setbillcode.add(iOpp.Account.BillingState);       
        system.debug('setbillcode :'+setbillcode);
        
        for(Opportunity_Line_Item__c iPLI : [Select id, ListPrice__c, Sales_Price__c, Product_Category__r.Name , Cost_Center__c,
                                             Product_Category__r.Cost_Center__c, Product_Count__c, Start_Date__c ,End_Date__c,
                                             Product_Category__r.Product_Type__c
                                             From Opportunity_Line_Item__c where Opportunity__c  =:strOppid ]){
                                                 
                                                 lstOppli.add(iPLI);
                                                 sum = sum + iPLI.Sales_Price__c;
                                                 setoppliid.add(iPLI.Product_Category__c);
                                                 //setoppliid.add(iPLI.iOpppli);
                                                 setCostCentre.add(iPLI.Product_Category__r.Cost_Center__c);
                                                 setAnnexure.add(iPLI.Product_Category__r.Name);
                                                 setbillGST.add(iOpp.Account.BillingState);       
                                                 system.debug('setbillGST :'+setbillGST);
                                                 //setprdat.add(iPLI.Product2);
                                                 mapOppLineItems.put(iPLI.Product_Category__r.Name, iPLI);
                                                 
                                                  if(iPLI.Product_Category__r.Cost_Center__c == 'Funds and Fixed Income' && 
                                                    iPLI.Product_Category__r.Product_Type__c == 'Standard'){
                                                     lstFundsofa.add(iPLI);
                                                 }
                                                 
        }
        
         //Date wise grouping OFA line items
        for(Opportunity_Line_Item__c irow : lstOppli){
            
            String strDateType = '';
            if(irow.Product_Category__r.Cost_Center__c != 'Funds and Fixed Income'
               && irow.Product_Category__r.Cost_Center__c != 'Customised'
               && irow.Product_Category__r.Cost_Center__c != 'Executive Training'
               && irow.Product_Category__r.Product_Type__c != 'Customized'){
                   
                   strDateType = 'Sub';   
               }            
            if(irow.Product_Category__r.Cost_Center__c == 'Funds and Fixed Income'){
                
                strDateType = 'FF';
            }
            
            if(irow.Product_Category__r.Cost_Center__c == 'Customised' || irow.Product_Category__r.Product_Type__c == 'Customized'){
                
                strDateType = 'Cus';
            }
            
            if(irow.Product_Category__r.Cost_Center__c == 'Executive Training'){
                
                strDateType = 'Training';
            }

            
            if(maplstOPLITostrDate.containsKey(strDateType+''+irow.Start_Date__c +' to ' +irow.End_Date__c)){
              
                list<Opportunity_Line_Item__c>lstMLI = new list<Opportunity_Line_Item__c>();
                lstMLI.add(irow);
                lstMLI.addAll(maplstOPLITostrDate.get(strDateType+''+irow.Start_Date__c +' to ' +irow.End_Date__c));
                maplstOPLITostrDate.put(strDateType+''+irow.Start_Date__c +' to ' +irow.End_Date__c, lstMLI);
            }else{
                list<Opportunity_Line_Item__c>lstMLI = new list<Opportunity_Line_Item__c>();
                lstMLI.add(irow);
                maplstOPLITostrDate.put(strDateType+''+irow.Start_Date__c +' to ' +irow.End_Date__c, lstMLI);
            }
        }
        system.debug('***maplstOPLITostrDate'+maplstOPLITostrDate);
        
        for(String strDate : maplstOPLITostrDate.keySet()){
            
            lstOFAUniqDate.add(strDate);            
            mapOFACountTostrDate.put(strDate, maplstOPLITostrDate.get(strDate).size());
        }
        system.debug('***lstOFAUniqDate'+lstOFAUniqDate);
        system.debug('***mapOFACountTostrDate'+mapOFACountTostrDate);

        Amount = sum;
        if(iOpp.IGST__c != null)
        {
            igst = Amount * ((iOpp.IGST__c) / 100);
            igst_per = iOpp.IGST__c;
        }
        else{   igst = 0;     igst_per = 0;  }
        
        if(iOpp.CGST__c != null){  cgst = Amount * ((iOpp.CGST__c) / 100);    cgst_per = iOpp.CGST__c;    }   
        
        else{
            cgst = 0;
            cgst_per = 0;
        }
        if(iOpp.SGST__c != null){    sgst = Amount * ((iOpp.SGST__c) / 100);   sgst_per = iOpp.SGST__c;
        }
        
        else{
            sgst = 0;
            sgst_per = 0;
        }
        
        total = Amount + igst + cgst + sgst;
        
        for(Opportunity_Product_Line_Items__c iOpppli : [Select id, Name, Product2ID__r.Name,Product2ID__r.Product_Category__r.Name 
                                                         From Opportunity_Product_Line_Items__c 
                                                         where Opportunity__c =: strOppid AND Product2ID__r.IsActive = true ]){
                                                             
                                                             if(mapoop.containskey(iOpppli.Product2ID__r.Product_Category__r.Name)){ mapoop.get(iOpppli.Product2ID__r.Product_Category__r.Name).add(iOpppli);
                                                             }
                                                             else
                                                             {
                                                                 List<Opportunity_Product_Line_Items__c> templist = new List<Opportunity_Product_Line_Items__c>();
                                                                 templist.add(iOpppli);
                                                                 mapoop.put(iOpppli.Product2ID__r.Product_Category__r.Name,templist);
                                                             }
                                                             lstOpppli.add(iOpppli);                                                 
                                                         }
        /*if(Prodmap.containsKey(Product_Category__r.Name)){
            prodmap.get(Product_Category__r.Name).add(lstOpppli);
        }*/
        
        if (total != null && total >= 0) {
            
            Long n = total.longValue();
            String str = NumberToWord.english_number(n);
            String strNew = '';
           
            for(String irow : str.split(' ')){
                system.debug(irow.capitalize());   
                strNew = strNew + ' ' + irow.capitalize();
            }
            AmountInWords = strNew; 
        }
        else {    AmountInWords = null;     }
        
        NumberTOWordConvertion nwcObj = new NumberTOWordConvertion();
        numInWords = nwcObj.getNumberTOWordConvertion(total);
        
      for(Product_Category__c PC :[SELECT ID, Name FROM Product_Category__c WHERE ID IN:setoppliid ]){
          
            setpcid.add(pc.Name);
       }
        
        strprod = '';
        for(Product2 iPROLI : [Select id, Name, Product2.isActive, Product_Category__c FROM Product2 
                               WHERE Product_Category__r.ID =:setpcid AND Product2.IsActive = True]){
          lstpro.add(iPROLI);
                                   
          if(strprod ==''){   strprod = strprod + iPROLI.Name;    }      else{      strprod = strprod + iPROLI.Name;    }
                                   
           System.debug('*** strprod***'+strprod);
            //setau.add(iPROLI.Product_Category_Name__c);*/
        }
        
        total_final = '';
        Integer num_total = total.intValue(); 
        if(total != 0){
        String str_initial_total = String.valueOf(num_total);
        System.debug(str_initial_total);
        
        //To Store the decimal values
        //String str_3 = str_initial.right(3);
        //System.debug('str_2 is             '+str_2);
        
        // storing last 3 digits seperately
        String str_2 = str_initial_total.right(3);
        System.debug('str_2 is             '+str_2);
         
        
        System.debug('before cutting last 3 digits   '+str_initial_total);
        // To cut out last 3 digits
        String s1 = str_initial_total.substring(0, str_initial_total.length() - 3);
        System.debug('after cutting last 3 digits     '+s1);
        String s1_FirstWord = '';
        String str_1 = '';
        
        if(math.mod(s1.length(), 2) == 0){   str_1 = s1.replaceAll('.{2}', '$0,');
            system.debug('from if loop str_1  is  '+str_1); 
        }
        
        else{
            System.debug('else loop - s1 before cutting is    '+s1);
            // to store the first value 
            s1_FirstWord = s1.substring(0, 1); 
            System.debug('else loop - s1 - step 2 aftr substring is    '+s1);
            // to remove the first character
            s1 = s1.substring(1);
            System.debug('else loop - s1 aftr length-1 is    '+s1);
            
            str_1 = s1.replaceAll('.{2}', '$0,');
            System.debug('else loop - s1 aftr cutting is    '+str_1);
            
            str_1 = s1_FirstWord + ',' + str_1;
            system.debug('from else loop str_1  is                     '+str_1); 
        }
        
        total_final = str_1 + str_2;
        system.debug('total_final  is  '+total_final);
        }
        else{   total_final = '0';   }
        
        igst_final = '';
        Integer numigst = igst.intValue(); 
        if(igst != 0){
        String str_initial_igst = String.valueOf(numigst);
        System.debug(str_initial_igst);
        
        //To Store the decimal values
        //String str_3 = str_initial.right(3);
        //System.debug('igst_str_2 is             '+igst_str_2);
        
        // storing last 3 digits seperately
        String igst_str_2 = str_initial_igst.right(3);
        System.debug('igst_str_2 is             '+igst_str_2);
         
        
        System.debug('before cutting last 3 digits   '+str_initial_igst);
        // To cut out last 3 digits
        String igst_s1 = str_initial_igst.substring(0, str_initial_igst.length() - 3);
        System.debug('after cutting last 3 digits     '+igst_s1);
        String igst_s1_FirstWord = '';
        String igst_str_1 = '';
        
        if(math.mod(igst_s1.length(), 2) == 0){
            igst_str_1 = igst_s1.replaceAll('.{2}', '$0,');
            system.debug('from if loop igst_str_1  is  '+igst_str_1); 
        }
        
        else{
            System.debug('else loop - igst_s1 before cutting is    '+igst_s1);
            // to store the first value 
            igst_s1_FirstWord = igst_s1.substring(0, 1);
            // to remove the first character
            igst_s1 = igst_s1.substring(1);      igst_str_1 = igst_s1.replaceAll('.{2}', '$0,');       igst_str_1 = igst_s1_FirstWord + ',' + igst_str_1;
            
            System.debug('else loop - igst_s1 - step 2 aftr substring is    '+igst_s1);
            System.debug('else loop - igst_s1 aftr length-1 is    '+igst_s1);
            System.debug('else loop - igst_s1 aftr cutting is    '+igst_str_1);
            system.debug('from else loop igst_str_1  is                     '+igst_str_1); 
            
        }
        
        igst_final = igst_str_1 + igst_str_2;
        system.debug('igst_final  is  '+igst_final);
        } 
        else{   igst_final = '0';  }
        
        
        sgst_final = '';
        Integer numsgst = sgst.intValue(); 
        if(sgst != 0){    String str_initial_sgst = String.valueOf(numsgst);
        System.debug(str_initial_sgst);
        
        //To Store the decimal values
        //String str_3 = str_initial.right(3);
        //System.debug('sgst_str_2 is             '+sgst_str_2);
        
        // storing last 3 digits seperately
        String sgst_str_2 = str_initial_sgst.right(3);
        System.debug('sgst_str_2 is             '+sgst_str_2);
         
        
        System.debug('before cutting last 3 digits   '+str_initial_sgst);
        // To cut out last 3 digits
        String sgst_s1 = str_initial_sgst.substring(0, str_initial_sgst.length() - 3);     String sgst_s1_FirstWord = '';   String sgst_str_1 = '';
        System.debug('after cutting last 3 digits     '+sgst_s1);
                      
        if(math.mod(sgst_s1.length(), 2) == 0){ sgst_str_1 = sgst_s1.replaceAll('.{2}', '$0,'); system.debug('from if loop sgst_str_1  is  '+sgst_str_1); }
        
        else{
            System.debug('else loop - sgst_s1 before cutting is    '+sgst_s1);
            // to store the first value 
            sgst_s1_FirstWord = sgst_s1.substring(0, 1); 
            // to remove the first character
            sgst_s1 = sgst_s1.substring(1);       sgst_str_1 = sgst_s1.replaceAll('.{2}', '$0,');        sgst_str_1 = sgst_s1_FirstWord + ',' + sgst_str_1;
            
            System.debug('else loop - sgst_s1 - step 2 aftr substring is    '+sgst_s1);
            System.debug('else loop - sgst_s1 aftr length-1 is    '+sgst_s1);
            System.debug('else loop - sgst_s1 aftr cutting is    '+sgst_str_1);
            system.debug('from else loop sgst_str_1  is                     '+sgst_str_1); 
        }
        
            sgst_final = sgst_str_1 + sgst_str_2;
            system.debug('sgst_final  is  '+sgst_final);
        }
         else{
            sgst_final = '0';
        }
        
        cgst_final = '';
        Integer numcgst = cgst.intValue(); 
        if(cgst != 0){
        String str_initial_cgst = String.valueOf(numcgst);        String cgst_str_2 = str_initial_cgst.right(3);
             System.debug(str_initial_cgst);
         //To Store the decimal values
        //String str_3 = str_initial.right(3);
        //System.debug('cgst_str_2 is             '+cgst_str_2);
        
        // storing last 3 digits seperately   
        System.debug('cgst_str_2 is             '+cgst_str_2);
        System.debug('before cutting last 3 digits   '+str_initial_cgst);
            
        // To cut out last 3 digits
        String cgst_s1 = str_initial_cgst.substring(0, str_initial_cgst.length() - 3);     String cgst_s1_FirstWord = '';  String cgst_str_1 = '';
        System.debug('after cutting last 3 digits     '+cgst_s1);
            
        if(math.mod(cgst_s1.length(), 2) == 0) {  cgst_str_1 = cgst_s1.replaceAll('.{2}', '$0,'); system.debug('from if loop cgst_str_1  is  '+cgst_str_1);  }
        
        else{
            System.debug('else loop - cgst_s1 before cutting is    '+cgst_s1);
            // to store the first value 
            cgst_s1_FirstWord = cgst_s1.substring(0, 1); 
            // to remove the first character
            cgst_s1 = cgst_s1.substring(1);    cgst_str_1 = cgst_s1.replaceAll('.{2}', '$0,');     cgst_str_1 = cgst_s1_FirstWord + ',' + cgst_str_1;
            System.debug('else loop - cgst_s1 - step 2 aftr substring is    '+cgst_s1);
            System.debug('else loop - cgst_s1 aftr length-1 is    '+cgst_s1);
            System.debug('else loop - cgst_s1 aftr cutting is    '+cgst_str_1);
            system.debug('from else loop cgst_str_1  is                     '+cgst_str_1); 
        }
        
        cgst_final = cgst_str_1 + cgst_str_2;
        system.debug('cgst_final  is  '+cgst_final);
        }
         else{
            cgst_final = '0';
        }
        
        Amount_final = '';
        Integer num_Amount = Amount.intValue(); 
        if(Amount != 0){
        String str_initial_Amount = String.valueOf(num_Amount);
        System.debug(str_initial_Amount);
        
        //To Store the decimal values
        //String str_3 = str_initial.right(3);
        //System.debug('Amount_str_2 is             '+Amount_str_2);
        
        // storing last 3 digits seperately
        String Amount_str_2 = str_initial_Amount.right(3);
        System.debug('Amount_str_2 is             '+Amount_str_2);
         
        
        System.debug('before cutting last 3 digits   '+str_initial_Amount);
        // To cut out last 3 digits
        String Amount_s1 = str_initial_Amount.substring(0, str_initial_Amount.length() - 3);
        System.debug('after cutting last 3 digits     '+Amount_s1);
        String Amount_s1_FirstWord = '';
        String Amount_str_1 = '';
        
        if(math.mod(Amount_s1.length(), 2) == 0){    Amount_str_1 = Amount_s1.replaceAll('.{2}', '$0,');
            system.debug('from if loop Amount_str_1  is  '+Amount_str_1); 
        }
        
        else{
            System.debug('else loop - Amount_s1 before cutting is    '+Amount_s1);
            // to store the first value 
            Amount_s1_FirstWord = Amount_s1.substring(0, 1); 
            System.debug('else loop - Amount_s1 - step 2 aftr substring is    '+Amount_s1);
            // to remove the first character
            Amount_s1 = Amount_s1.substring(1);
            System.debug('else loop - Amount_s1 aftr length-1 is    '+Amount_s1);
            
            Amount_str_1 = Amount_s1.replaceAll('.{2}', '$0,');
            System.debug('else loop - Amount_s1 aftr cutting is    '+Amount_str_1);
            
            Amount_str_1 = Amount_s1_FirstWord + ',' + Amount_str_1;
            system.debug('from else loop Amount_str_1  is                     '+Amount_str_1); 
        }
        
        Amount_final = Amount_str_1 + Amount_str_2;
        system.debug('Amount_final  is  '+Amount_final);
        }
        else{  Amount_final = '0';  }
        
        strHSN = '';
        for(HSN_Master__c iHSN : [SELECT id, HSN_Code__c, Cost_Center__c FROM HSN_Master__c WHERE Cost_Center__c IN :setCostCentre]){
            
            if(strHSN == ''){  strHSN = strHSN + iHSN.Cost_Center__c+'-'+iHSN.HSN_Code__c;  }  
            else{ strHSN = strHSN + ',' + iHSN.Cost_Center__c+'-'+iHSN.HSN_Code__c;  }    
        }
        
        strcom = '';
        strGST = '';
        for(Billing_Location__c lstbloc : [SELECT id, Billing_Location_Code__c, Billing_Location_Name__c,GST_State_Code__c , Billing_Location_GST__c 
                                           FROM Billing_Location__c WHERE Billing_Location_Name__c IN :setbillcode
                                           AND Billing_Location_Name__c IN :setbillGST]){
                                               system.debug('lstbloc'+lstbloc);
                                               
                                               if(strcom == ''){  strcom = strcom + lstbloc.GST_State_Code__c;  }
                                               else{  strcom = strcom + ',' + lstbloc.GST_State_Code__c; }    
                                               
                                               if(strGST == ''){    strGST = strGST + lstbloc.Billing_Location_GST__c;  } 
                                               else{   strGST = strGST + ',' + lstbloc.Billing_Location_GST__c;  } 
                                               
                                           }
        
        /*stran = '';
        for(Document_Annexure__c iAX : [SELECT id, Annexure__c, Name FROM Document_Annexure__c WHERE Name IN :setAnnexure]){
            
            anx.add(iAX);
            //setprc.add(iAX.Product_Category__c);
            
            if(stran == ''){
                stran = stran + iAX.Annexure__c;
            }
            else{
                stran = stran + iAX.Annexure__c;
            }    
        }*/
        
        /*strp = '';
        for(Product_Category__c prc : [SELECT id, Name, Name FROM Product_Category__c WHERE Name IN :setprc]){
            
            if(strp == ''){
                strp = strp + iprc.Name;
            }
            else{
                strp = strp + iprc.Name;
            }  
        } */ 
        
    }
    
}